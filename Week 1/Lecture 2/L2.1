//Substitution model and Recursion
const cost_per_meter = 199.95;

function circumference(radius){
    return math_PI*2*radius;
}

function cost_of_circular_handrail(r){
    return cost_per_meter*circumference(r);
}

cost_of_circular_handrail(2);

//Applicative order reduction, evaluate the arguments first, then the function
//Normal order reduction, substitute the functions into each other first
//In JS, Java, Python we use applicative order reduction
//Haskell uses normal order (lazily)

/*
//Primitve
//Operatore
//Constant declaration
//Function applicaton: evaluate component expression
if function is primitive: apply the primitive function
if function is compound: sub arg values for params in body of decaration
*/